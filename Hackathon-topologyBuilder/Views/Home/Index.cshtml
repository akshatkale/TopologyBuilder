<style>
    #canvas {
        width: 1400px;
        height: 2050px;
        resize: both;
        margin-top: 5%;
        margin-left: 10%;
        border: 3px inset #aaaaaa;
    }

    #stage {
        padding: 5px;
        top: 10%;
        left: 0;
        border: 1px solid #aaaaaa;
        position: fixed;
    }

    #StageTable {
        border: 0px solid #aaaaaa;
    }

	.form-group {
		border: 1px solid black; /* Change border width and color here */
	}

	/* the !important declaration is for this snippet, because this snippet include bootstrap after this declarations **/
	.form-control {
		border: none !important; /* No border for input */
		box-shadow: none !important; /* No border for input */
        width: 150px;
	}

	.form-control:focus {
		box-shadow: none !important; /* Remove the blue shining at focus */
	}

    .imgclass
    {
        width: 50px;
        height: 50px;
    }

    .canvasblock {
        width: 750px;
        height: 300px;
        border-style: dotted;
        background-color: #ffffff;
        text-align: center;
        border: 3px solid #d3d3d3;
        resize: both;
        overflow: auto;
    }

    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }
    /* Modal Content/Box */
    .modal-content {
        background-color: #fefefe;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /* Could be more or less, depending on screen size */
    }
    /* The Close Button */
    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

</style>

<script src="https://cdn.jsdelivr.net/npm/leader-line@1.0.5/leader-line.min.js"></script>

<body>
    <nav class="navbar navbar-expand-md fixed-top" style="background-color:#0078d4;">
		<div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav" >
				<li class="nav-item active">
                    <a class="nav-link" href="#" style="color:white;">Topology Builder</a>
				</li>
                <li class="nav-item">
                    <a class="nav-link" href="#" style="color:white;">Help</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#" style="color:white;">Contact us</a>
                </li>
			</ul>
		</div>
	</nav>

    <div id="stage">
        <!--ondrop="remove(event)" ondragover="allowDrop(event)"> -->
        <table id="StageTable">
            <tr>
                <td>Virtual WAN</td>
                <td>
                    <img id="wan" src="./assets/wan.png" class="imgclass" ondblclick="addcanvasblock('wan')">
                </td>
            </tr>
            <tr>
                <td>Virtual Hub</td>
                <td>
                    <img id="hub" src="./assets/hub.png" class="imgclass" ondblclick="addcanvasblock('hub')">
                </td>
            </tr>
            <tr>
                <td>VNG</td>
                <td>
                    <img id="vng" src="./assets/vng.png" class="imgclass" ondblclick="addcanvasblock('vng')">
                </td>
            </tr>
			<tr>
				<td>Connection</td>
				<td>
                    <img id="conn" src="./assets/conn.png" class="imgclass" ondblclick="addcanvasblock('conn')">
				</td>
			</tr>
            <tr>
                <td>Site</td>
                <td>
                    <img id="site" src="./assets/site.png" class="imgclass" ondblclick="addcanvasblock('site')">
                </td>
            </tr>
		</table>
        <br />
		<form id="formid" action="" onsubmit="submitForm()">
			<div class="form-group">
				<input type="text" class="form-control" id="sid" name="sid" placeholder="Subscriptionid" required />
			</div>
			<div class="form-group">
				<input type="text" class="form-control" id="rg" name="rg" placeholder="Resourcegroup" required />
			</div>
			<input type="submit" class="btn btn-primary btn-md" value="Compute Template" />
		</form>
        <br/>
        <br/>
		<button type="button" class="btn btn-primary btn-md" onclick="TSButton()">
			Deploy Topology
		</button>
    </div>


    <div id="canvas" ondrop="drop(event)" ondragover="allowDrop(event)"></div>

</body>



<script>


    var jsondata = {
        "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
        "contentVersion": "1.0.0.0",
        "parameters": {},
        "resources": [
            {
                "apiVersion": "2019-09-01",
                "location": "eastus2",
                "name": "vragireddy_test",
                "properties": {
                    "virtualHubs": [],
                    "vpnSites": [],
                    "type": "Standard"
                },
                "type": "Microsoft.Network/virtualWans"
            },
            {
                "type": "Microsoft.Network/virtualHubs",
                "apiVersion": "2022-07-01",
                "name": "vragireddy_test_hub",
                "location": "eastus",
                "tags": {},
                "properties": {
                    "addressPrefix": "10.12.13.0/24",
                    "virtualWan": {
                        "id": "/subscriptions/10a8c16e-acc9-4def-867c-a66c3d9238e6/resourceGroups/NaasTestGroup/providers/Microsoft.Network/virtualWans/vragireddy_test"
                    },
                    "sku": "Standard",
                    "virtualRouterAutoScaleConfiguration": {
                        "minCapacity": 2
                    },
                    "hubRoutingPreference": "ExpressRoute"
                }
            },
            {
                "type": "Microsoft.Network/vpnGateways",
                "apiVersion": "2022-01-01",
                "name": "f485e136158d46a68131ac48bc52a14a-eastus-gw",
                "location": "eastus",
                "dependsOn": [
                    "/subscriptions/10a8c16e-acc9-4def-867c-a66c3d9238e6/resourceGroups/NaasTestGroup/providers/Microsoft.Network/virtualHubs/vragireddy_test_hub"
                ],
                "properties": {
                    "vpnGatewayScaleUnit": 1,
                    "virtualHub": {
                        "id": "/subscriptions/10a8c16e-acc9-4def-867c-a66c3d9238e6/resourceGroups/NaasTestGroup/providers/Microsoft.Network/virtualHubs/vragireddy_test_hub"
                    },
                    "isRoutingPreferenceInternet": false,
                    "bgpSettings": {
                        "asn": 65515
                    }
                }
            }
        ]
    };

    var ResourceNameMap = new Map();
    var dependencyMap = new Map();
    function buildDependency(parent, child) {
        dependenceMap.set(document.getElementById(child).id, document.getElementById(parent).id)
    }

    //var line = new LeaderLine(document.getElementById('wan'), document.getElementById('hub'));
    function inputResourceName(data) {
        let resourceName = prompt("Please enter Resource Name:");
        if (resourceName != null) {
            ResourceNameMap.set(document.getElementById(data).id, resourceName);
        }
    }

    function addcanvasblock(blocktype) {
		if (blocktype == "Wan" || blocktype == "Hub")
		{
            let imageid=blocktype+"1"
            var group=$(document.createElement('div'));
            group.attr({ id: blocktype + "div1" });
            group.attr({draggable: "true"});
            group.attr({ className: "canvasblock" });
            //group.addClass('group');
            let imgdiv = '<div>Virtual' + blocktype + '<img id="' + imageid + '" src="./assets/' + blocktype + '.png" class="imgclass"/></div>';
            imgdiv += '<div id="myModal" class="modal" > <div class="modal-content" > <span class="close" >& times; </span><div id="' + blocktype + 'json"></div > </div></div > ';
            group.html(imgdiv);
            group.bind("dragstart", function(ev){drag(ev);});
            $("#canvas").append(group);
          
            //dragElement(document.getElementById(blocktype + "div1"));
            //dragElement(document.getElementById("wandiv1"));
		}

    }

    function allowDrop(ev) {
        console.log("allowDrop");
        ev.preventDefault();
    }

    function drag(ev) {
        console.log("Drag target:" + ev.target.id);
        ev.dataTransfer = ev.originalEvent.dataTransfer;
        ev.dataTransfer.setData("text", ev.target.id);
    }

    function drop(event) {
        console.log("drop target:" + event.target.nodeName);

        event.preventDefault();
        var data = event.dataTransfer.getData("text");
        console.log("data target:" + document.getElementById(data));
        event.target.appendChild(document.getElementById(data));
        /*
        if (event.target.nodeName !== "IMG") {
            //event.srcElement.appendChild(document.getElementById(data)); //didnt work
            let div = document.createElement('div');
            div.draggable = "true";
            div.id = "wandiv1";
            div.className = "canvasblock";
            div.innerHTML = '<p>VirtualWan</p><img id="wan1" src="./assets/wan.png"" width="50" height="50">';
            event.target.appendChild(div);
            //event.target.appendChild(document.getElementById(data));
            document.getElementById("wanholder").innerHTML = '<img id="wan1" src="./assets/wan.png" draggable="true" ondragstart="drag(event)" width="50" height="50">';
            document.getElementById("demo").innerHTML = document.getElementById(data).id + " was added to the topology.";


        }

        */
        /*
    var line = new LeaderLine(
     document.getElementById('wan'),
     document.getElementById(data));
     */
    }

    function remove(event) {
        event.preventDefault();
        var data = event.dataTransfer.getData("text");
        if (event.target.nodeName !== "IMG") {
            event.target.appendChild(document.getElementById(data));

            document.getElementById("demo").innerHTML = document.getElementById(data).id + " was removed from the topology.";

            line.remove();
        }
    }


    //dragElement(document.getElementById("wandiv1"));

    function dragElement(elmnt) {
        var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
        if (document.getElementById(elmnt.id + "header")) {
            /* if present, the header is where you move the DIV from:*/
            document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
        } else {
            /* otherwise, move the DIV from anywhere inside the DIV:*/
            elmnt.onmousedown = dragMouseDown;
        }

        function dragMouseDown(e) {
            e = e || window.event;
            e.preventDefault();
            // get the mouse cursor position at startup:
            pos3 = e.clientX;
            pos4 = e.clientY;
            document.onmouseup = closeDragElement;
            // call a function whenever the cursor moves:
            document.onmousemove = elementDrag;
        }

        function elementDrag(e) {
            e = e || window.event;
            e.preventDefault();
            // calculate the new cursor position:
            pos1 = pos3 - e.clientX;
            pos2 = pos4 - e.clientY;
            pos3 = e.clientX;
            pos4 = e.clientY;
            // set the element's new position:
            elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
            elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
        }

        function closeDragElement() {
            /* stop moving when mouse button is released:*/
            document.onmouseup = null;
            document.onmousemove = null;
        }
    }

    function submitForm() {
        let sid = document.getElementById("sid").value;
        let rg = document.getElementById("rg").value;
    }

    function replaceSubscriptionAndResGroups(sid, rg) {
        let str = jsondata.resources[1].properties.virtualWan.id;
        const parts = str.split('/');
        const subscriptionIndex = parts.indexOf('subscriptions');
        const resourceGroupIndex = parts.indexOf('resourceGroups');
        parts[subscriptionIndex + 1] = sid;
        parts[resourceGroupIndex + 1] = rg;
        let res = parts.join('/');
        jsondata.resources[1].properties.virtualWan.id = res;
        jsondata.resources[2].properties.virtualHub.id = res;
        jsondata.resources[2].dependsOn = [res];
    }

    var modal = document.getElementById("myModal");
    var btn = document.getElementById("wan1");
    var span = document.getElementsByClassName("close")[0];
    btn.onclick = function () {
        modal.style.display = "block";
        load("wanjson");
    }
    span.onclick = function () {
        modal.style.display = "none";
    }
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
    var hubbtn = document.getElementById("hub");
    hubbtn.onclick = function () {
        modal.style.display = "block";
        load("hubjson");
    }
    function load(name) {
        const params = new URLSearchParams(document.location.search);
        const s = params.get("sid");
        const o = params.get("rg");
        var div = document.getElementById(name);
        replaceSubscriptionAndResGroups(s, o);
        div.innerHTML = "<div class='inner'>" + JSON.stringify(jsondata) + "</div>" + "<br>";
    }
</script>